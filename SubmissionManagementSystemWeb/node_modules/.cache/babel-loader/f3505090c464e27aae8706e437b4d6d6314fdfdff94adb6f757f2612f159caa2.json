{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport constant from '@/consts/const';\nexport default {\n  beforeRouteUpdate(to, from, next) {\n    this.message = to.params.message;\n    if (this.message != null) {\n      this.result = true;\n      setTimeout(() => {\n        this.result = false;\n      }, constant.MESSAGE_DISPLAY_TIME);\n    }\n    this.selectAll();\n    next();\n  },\n  data() {\n    return {\n      error: constant.ERROR_MESSAGE,\n      message: this.$route.params.message,\n      result: false,\n      users: [],\n      headers: [{\n        text: 'ユーザ名',\n        value: 'userName'\n      }, {\n        text: 'SlackID',\n        value: 'slackId'\n      }, {\n        text: '操作',\n        value: 'delete',\n        align: 'center',\n        sortable: false\n      }]\n    };\n  },\n  created() {\n    this.selectAll();\n    if (this.message != null) {\n      this.result = true;\n      setTimeout(() => {\n        this.result = false;\n      }, constant.MESSAGE_DISPLAY_TIME);\n    }\n  },\n  methods: {\n    selectAll() {\n      const path = constant.SELECT_USER_ALL_PATH;\n      axios.get(path).then(response => {\n        this.users = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    insert() {\n      this.$router.push(\"MemberInsert\");\n    },\n    del(id) {\n      var res = confirm(constant.DELETE_CONFIRM_MESSAGE);\n      if (res == true) {\n        const path = constant.DELETE_USER_PATH + id;\n        axios.delete(path).then(response => {\n          console.log(response.data);\n          this.$router.push({\n            name: \"MemberManagement\",\n            params: {\n              message: constant.DELETE_COMPLETE_MESSAGE\n            }\n          });\n        }).catch(err => {\n          console.log(\"err:\", err);\n          this.$router.push({\n            name: \"MemberManagement\",\n            params: {\n              message: constant.ERROR_MESSAGE\n            }\n          });\n        });\n      }\n    },\n    update(id, userName, slackId) {\n      this.$router.push({\n        name: \"MemberUpdate\",\n        params: {\n          id: id,\n          userName: userName,\n          slackId: slackId\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","constant","beforeRouteUpdate","to","from","next","message","params","result","setTimeout","MESSAGE_DISPLAY_TIME","selectAll","data","error","ERROR_MESSAGE","$route","users","headers","text","value","align","sortable","created","methods","path","SELECT_USER_ALL_PATH","get","then","response","catch","console","log","insert","$router","push","del","id","res","confirm","DELETE_CONFIRM_MESSAGE","DELETE_USER_PATH","delete","name","DELETE_COMPLETE_MESSAGE","err","update","userName","slackId"],"sources":["src/pages/MemberManagement.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row>\n            <v-col cols=\"4\">\n                <h2>\n                    メンバー管理\n                </h2>\n            </v-col>\n            <v-col cols=\"3\">\n                <Transition name=\"fade\">\n                    <div v-if=\"result\">\n                        <div v-if=\"message === this.error\" class=\"alert alert-danger d-flex align-center justify-center\"\n                            style=\"height: 39px\">\n                            {{ message }}\n                        </div>\n                        <div v-else class=\"alert alert-success d-flex align-center justify-center\" style=\"height: 1px\">\n                            {{ message }}\n                        </div>\n                    </div>\n                </Transition>\n            </v-col>\n            <v-col cols=\"4\">\n            </v-col>\n            <v-col cols=\"1\">\n                <v-btn small fab dark color=\"indigo\" @click=\"insert()\">\n                    <v-icon dark> mdi-plus </v-icon>\n                </v-btn>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col>\n                <v-data-table :headers=\"headers\" :items=\"users\">\n                    <template v-slot:[`item.delete`]=\"{ index }\">\n                        <v-btn small @click=\"update(users[index].id, users[index].userName, users[index].slackId)\">\n                            <v-icon> mdi-pencil</v-icon>\n                        </v-btn>\n                        <v-btn small @click=\"del(users[index].id)\">\n                            <v-icon> mdi-delete </v-icon>\n                        </v-btn>\n\n                    </template>\n                </v-data-table>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios'\nimport constant from '@/consts/const';\nexport default {\n    beforeRouteUpdate(to, from, next) {\n        this.message = to.params.message;\n        if (this.message != null) {\n            this.result = true;\n            setTimeout(() => { this.result = false; }, constant.MESSAGE_DISPLAY_TIME);\n        }\n        this.selectAll()\n        next()\n    },\n    data() {\n        return {\n            error: constant.ERROR_MESSAGE,\n            message: this.$route.params.message,\n            result: false,\n            users: [],\n            headers: [\n                {\n                    text: 'ユーザ名',\n                    value: 'userName',\n                },\n                {\n                    text: 'SlackID',\n                    value: 'slackId',\n                },\n                {\n                    text: '操作',\n                    value: 'delete',\n                    align: 'center',\n                    sortable: false,\n                },\n            ],\n        }\n    },\n    created() {\n        this.selectAll()\n        if (this.message != null) {\n            this.result = true;\n            setTimeout(() => { this.result = false; }, constant.MESSAGE_DISPLAY_TIME);\n        }\n    },\n    methods: {\n        selectAll() {\n            const path = constant.SELECT_USER_ALL_PATH;\n            axios.get(path)\n                .then(response => {\n                    this.users = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        insert() {\n            this.$router.push(\n                \"MemberInsert\"\n            );\n        },\n        del(id) {\n            var res = confirm(constant.DELETE_CONFIRM_MESSAGE);\n            if (res == true) {\n                const path = constant.DELETE_USER_PATH + id\n                axios.delete(path\n                )\n                    .then(response => {\n                        console.log(response.data);\n                        this.$router.push({\n                            name: \"MemberManagement\",\n                            params: {\n                                message: constant.DELETE_COMPLETE_MESSAGE\n                            }\n                        });\n                    })\n                    .catch(err => {\n                        console.log(\"err:\", err);\n                        this.$router.push({\n                            name: \"MemberManagement\",\n                            params: {\n                                message: constant.ERROR_MESSAGE\n                            }\n                        });\n                    });\n            }\n        },\n        update(id, userName, slackId) {\n            this.$router.push({\n                name: \"MemberUpdate\",\n                params: {\n                    id: id,\n                    userName: userName,\n                    slackId: slackId,\n                }\n            });\n        },\n    }\n}\n</script>\n\n<style scoped>\n.fade-enter-active,\n.fade-leave-active {\n    transition: opacity .5s;\n}\n\n.fade-enter,\n.fade-leave-to {\n    opacity: 0;\n}\n</style>"],"mappings":";AAgDA,OAAAA,KAAA;AACA,OAAAC,QAAA;AACA;EACAC,kBAAAC,EAAA,EAAAC,IAAA,EAAAC,IAAA;IACA,KAAAC,OAAA,GAAAH,EAAA,CAAAI,MAAA,CAAAD,OAAA;IACA,SAAAA,OAAA;MACA,KAAAE,MAAA;MACAC,UAAA;QAAA,KAAAD,MAAA;MAAA,GAAAP,QAAA,CAAAS,oBAAA;IACA;IACA,KAAAC,SAAA;IACAN,IAAA;EACA;EACAO,KAAA;IACA;MACAC,KAAA,EAAAZ,QAAA,CAAAa,aAAA;MACAR,OAAA,OAAAS,MAAA,CAAAR,MAAA,CAAAD,OAAA;MACAE,MAAA;MACAQ,KAAA;MACAC,OAAA,GACA;QACAC,IAAA;QACAC,KAAA;MACA,GACA;QACAD,IAAA;QACAC,KAAA;MACA,GACA;QACAD,IAAA;QACAC,KAAA;QACAC,KAAA;QACAC,QAAA;MACA;IAEA;EACA;EACAC,QAAA;IACA,KAAAX,SAAA;IACA,SAAAL,OAAA;MACA,KAAAE,MAAA;MACAC,UAAA;QAAA,KAAAD,MAAA;MAAA,GAAAP,QAAA,CAAAS,oBAAA;IACA;EACA;EACAa,OAAA;IACAZ,UAAA;MACA,MAAAa,IAAA,GAAAvB,QAAA,CAAAwB,oBAAA;MACAzB,KAAA,CAAA0B,GAAA,CAAAF,IAAA,EACAG,IAAA,CAAAC,QAAA;QACA,KAAAZ,KAAA,GAAAY,QAAA,CAAAhB,IAAA;MACA,GACAiB,KAAA,CAAAhB,KAAA;QACAiB,OAAA,CAAAC,GAAA,CAAAlB,KAAA;MACA;IACA;IACAmB,OAAA;MACA,KAAAC,OAAA,CAAAC,IAAA,CACA,cACA;IACA;IACAC,IAAAC,EAAA;MACA,IAAAC,GAAA,GAAAC,OAAA,CAAArC,QAAA,CAAAsC,sBAAA;MACA,IAAAF,GAAA;QACA,MAAAb,IAAA,GAAAvB,QAAA,CAAAuC,gBAAA,GAAAJ,EAAA;QACApC,KAAA,CAAAyC,MAAA,CAAAjB,IACA,EACAG,IAAA,CAAAC,QAAA;UACAE,OAAA,CAAAC,GAAA,CAAAH,QAAA,CAAAhB,IAAA;UACA,KAAAqB,OAAA,CAAAC,IAAA;YACAQ,IAAA;YACAnC,MAAA;cACAD,OAAA,EAAAL,QAAA,CAAA0C;YACA;UACA;QACA,GACAd,KAAA,CAAAe,GAAA;UACAd,OAAA,CAAAC,GAAA,SAAAa,GAAA;UACA,KAAAX,OAAA,CAAAC,IAAA;YACAQ,IAAA;YACAnC,MAAA;cACAD,OAAA,EAAAL,QAAA,CAAAa;YACA;UACA;QACA;MACA;IACA;IACA+B,OAAAT,EAAA,EAAAU,QAAA,EAAAC,OAAA;MACA,KAAAd,OAAA,CAAAC,IAAA;QACAQ,IAAA;QACAnC,MAAA;UACA6B,EAAA,EAAAA,EAAA;UACAU,QAAA,EAAAA,QAAA;UACAC,OAAA,EAAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}