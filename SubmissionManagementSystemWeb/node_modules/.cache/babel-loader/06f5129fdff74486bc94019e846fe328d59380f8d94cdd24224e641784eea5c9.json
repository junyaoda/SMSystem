{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport constant from '@/consts/const';\n// import qs from 'qs';\nexport default {\n  data() {\n    return {\n      users: [],\n      selected1: [],\n      selected2: \"\",\n      selected3: \"\",\n      selected4: \"\",\n      selected5: \"\",\n      selected6: \"\",\n      selected7: \"\",\n      selected8: \"\",\n      groupName: \"\"\n    };\n  },\n  created() {\n    this.selectAll();\n    if (this.message != null) {\n      this.result = true;\n      setTimeout(() => {\n        this.result = false;\n      }, constant.MESSAGE_DISPLAY_TIME);\n    }\n  },\n  methods: {\n    selectAll() {\n      const path = constant.SELECT_USER_PULLDOWN_PATH;\n      axios.get(path).then(response => {\n        this.users = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    insert(groupName, userId) {\n      var number = Number(userId);\n      var userIdList = {\n        \"id\": number\n      };\n      var list = [];\n      list.push(userIdList);\n      list.push(userIdList);\n\n      // const params = {\n      //     groupName: groupName,\n      //     user:[userIdList],\n      // };\n      const data = {\n        \"id\": 1,\n        \"groupName\": \"福岡技術部\",\n        \"user\": list\n        // {\n        //     \"id\": 2,\n        // }, \n        // {\n        //     \"id\": 3,\n        // }\n      };\n\n      // const paramsSerializer = (params) => qs.stringify(params);\n\n      var res = confirm(constant.INSERT_CONFIRM_MESSAGE + \"  \" + userId + \"  \" + groupName + \"  \" + list + \"  \" + userIdList);\n      if (res == true) {\n        const path = constant.INSERT_GROUP_PATH;\n        axios.put(path,\n        // groupName: groupName,\n        // user: qs.stringify({'id':userIdList}),\n        data).then(response => {\n          console.log(response.data);\n          this.$router.push({\n            name: \"PageLoading\",\n            params: {\n              message: constant.INSERT_COMPLETE_MESSAGE\n            }\n          });\n        }).catch(err => {\n          console.log(\"err:\", err);\n          this.$router.push({\n            name: \"GroupManagement\",\n            params: {\n              message: constant.ERROR_MESSAGE\n            }\n          });\n        });\n      }\n    },\n    back() {\n      this.$router.push({\n        name: \"GroupManagement\"\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","constant","data","users","selected1","selected2","selected3","selected4","selected5","selected6","selected7","selected8","groupName","created","selectAll","message","result","setTimeout","MESSAGE_DISPLAY_TIME","methods","path","SELECT_USER_PULLDOWN_PATH","get","then","response","catch","error","console","log","insert","userId","number","Number","userIdList","list","push","res","confirm","INSERT_CONFIRM_MESSAGE","INSERT_GROUP_PATH","put","$router","name","params","INSERT_COMPLETE_MESSAGE","err","ERROR_MESSAGE","back"],"sources":["src/pages/GroupInsert.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row>\n            <v-col cols=\"11\">\n                <h2>\n                    グループ追加\n                </h2>\n            </v-col>\n            <v-col>\n                <v-btn small fab dark color=\"indigo\" @click=\"back()\">\n                    <v-icon dark> mdi-undo-variant </v-icon>\n                </v-btn>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col>\n                <v-text-field hide-details=\"auto\" v-model=\"groupName\" label=\"グループ名\" clearable></v-text-field>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col cols=\"3\">\n                <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                    v-model=\"selected1\"></v-select>\n            </v-col>\n            <v-col cols=\"3\">\n                <v-select item-text=\"userName\" :items=\"users\" label=\"ユーザ名\" class=\"ma-2\" v-model=\"selected2\"></v-select>\n            </v-col>\n            <v-col cols=\"3\">\n                <v-select item-text=\"userName\" :items=\"users\" label=\"ユーザ名\" class=\"ma-2\" v-model=\"selected3\"></v-select>\n            </v-col>\n            <v-col cols=\"3\">\n                <v-select item-text=\"userName\" :items=\"users\" label=\"ユーザ名\" class=\"ma-2\" v-model=\"selected4\"></v-select>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col cols=\"3\">\n                <v-select item-text=\"userName\" :items=\"users\" label=\"ユーザ名\" class=\"ma-2\" v-model=\"selected5\"></v-select>\n            </v-col>\n            <v-col cols=\"3\">\n                <v-select item-text=\"userName\" :items=\"users\" label=\"ユーザ名\" class=\"ma-2\" v-model=\"selected6\"></v-select>\n            </v-col>\n            <v-col cols=\"3\">\n                <v-select item-text=\"userName\" :items=\"users\" label=\"ユーザ名\" class=\"ma-2\" v-model=\"selected7\"></v-select>\n            </v-col>\n            <v-col cols=\"3\">\n                <v-select item-text=\"userName\" :items=\"users\" label=\"ユーザ名\" class=\"ma-2\" v-model=\"selected8\"></v-select>\n            </v-col>\n        </v-row>\n        <v-layout>\n            <v-btn class=\"mx-auto\" @click=\"insert(groupName, selected1)\">\n                insert\n            </v-btn>\n        </v-layout>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport constant from '@/consts/const';\n// import qs from 'qs';\nexport default {\n    data() {\n        return {\n            users: [],\n            selected1: [],\n            selected2: \"\",\n            selected3: \"\",\n            selected4: \"\",\n            selected5: \"\",\n            selected6: \"\",\n            selected7: \"\",\n            selected8: \"\",\n            groupName: \"\",\n        };\n    },\n    created() {\n        this.selectAll()\n        if (this.message != null) {\n            this.result = true;\n            setTimeout(() => { this.result = false; }, constant.MESSAGE_DISPLAY_TIME);\n        }\n    },\n    methods: {\n        selectAll() {\n            const path = constant.SELECT_USER_PULLDOWN_PATH;\n            axios.get(path)\n                .then(response => {\n                    this.users = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        insert(groupName, userId) {\n            var number = Number(userId);\n            var userIdList = { \"id\": number };\nvar list = [];\n            list.push(userIdList);\n            list.push(userIdList);\n\n            // const params = {\n            //     groupName: groupName,\n            //     user:[userIdList],\n            // };\n            const data = \n                    {\n                        \"id\": 1,\n                        \"groupName\": \"福岡技術部\",\n                        \"user\": \n                            list\n                            // {\n                            //     \"id\": 2,\n                            // }, \n                            // {\n                            //     \"id\": 3,\n                            // }\n                        \n                    }\n\n            // const paramsSerializer = (params) => qs.stringify(params);\n           \n            var res = confirm(constant.INSERT_CONFIRM_MESSAGE + \"  \" + userId + \"  \" + groupName + \"  \" + list + \"  \" + userIdList);\n            if (res == true) {\n                const path = constant.INSERT_GROUP_PATH\n                axios.put(path,\n                    // groupName: groupName,\n                    // user: qs.stringify({'id':userIdList}),\n                    data\n            \n                )\n                    .then(response => {\n                        console.log(response.data);\n                        this.$router.push({\n                            name: \"PageLoading\",\n                            params: {\n                                message: constant.INSERT_COMPLETE_MESSAGE\n                            }\n                        });\n                    })\n                    .catch(err => {\n                        console.log(\"err:\", err);\n                        this.$router.push({\n                            name: \"GroupManagement\",\n                            params: {\n                                message: constant.ERROR_MESSAGE\n                            }\n                        });\n                    });\n            }\n        },\n        back() {\n            this.$router.push({\n                name: \"GroupManagement\"\n            })\n        },\n    }\n}\n</script>\n\n<style scoped></style>"],"mappings":";AAyDA,OAAAA,KAAA;AACA,OAAAC,QAAA;AACA;AACA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,SAAA;MACAC,SAAA;MACAC,SAAA;MACAC,SAAA;MACAC,SAAA;MACAC,SAAA;MACAC,SAAA;MACAC,SAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;IACA,SAAAC,OAAA;MACA,KAAAC,MAAA;MACAC,UAAA;QAAA,KAAAD,MAAA;MAAA,GAAAf,QAAA,CAAAiB,oBAAA;IACA;EACA;EACAC,OAAA;IACAL,UAAA;MACA,MAAAM,IAAA,GAAAnB,QAAA,CAAAoB,yBAAA;MACArB,KAAA,CAAAsB,GAAA,CAAAF,IAAA,EACAG,IAAA,CAAAC,QAAA;QACA,KAAArB,KAAA,GAAAqB,QAAA,CAAAtB,IAAA;MACA,GACAuB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAG,OAAAjB,SAAA,EAAAkB,MAAA;MACA,IAAAC,MAAA,GAAAC,MAAA,CAAAF,MAAA;MACA,IAAAG,UAAA;QAAA,MAAAF;MAAA;MACA,IAAAG,IAAA;MACAA,IAAA,CAAAC,IAAA,CAAAF,UAAA;MACAC,IAAA,CAAAC,IAAA,CAAAF,UAAA;;MAEA;MACA;MACA;MACA;MACA,MAAA/B,IAAA,GACA;QACA;QACA;QACA,QACAgC;QACA;QACA;QACA;QACA;QACA;QACA;MAEA;;MAEA;;MAEA,IAAAE,GAAA,GAAAC,OAAA,CAAApC,QAAA,CAAAqC,sBAAA,UAAAR,MAAA,UAAAlB,SAAA,UAAAsB,IAAA,UAAAD,UAAA;MACA,IAAAG,GAAA;QACA,MAAAhB,IAAA,GAAAnB,QAAA,CAAAsC,iBAAA;QACAvC,KAAA,CAAAwC,GAAA,CAAApB,IAAA;QACA;QACA;QACAlB,IAEA,EACAqB,IAAA,CAAAC,QAAA;UACAG,OAAA,CAAAC,GAAA,CAAAJ,QAAA,CAAAtB,IAAA;UACA,KAAAuC,OAAA,CAAAN,IAAA;YACAO,IAAA;YACAC,MAAA;cACA5B,OAAA,EAAAd,QAAA,CAAA2C;YACA;UACA;QACA,GACAnB,KAAA,CAAAoB,GAAA;UACAlB,OAAA,CAAAC,GAAA,SAAAiB,GAAA;UACA,KAAAJ,OAAA,CAAAN,IAAA;YACAO,IAAA;YACAC,MAAA;cACA5B,OAAA,EAAAd,QAAA,CAAA6C;YACA;UACA;QACA;MACA;IACA;IACAC,KAAA;MACA,KAAAN,OAAA,CAAAN,IAAA;QACAO,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}