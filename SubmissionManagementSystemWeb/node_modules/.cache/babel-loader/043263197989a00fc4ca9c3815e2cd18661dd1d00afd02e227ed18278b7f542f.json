{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport constant from '@/consts/const';\nexport default {\n  data() {\n    return {\n      users: [],\n      groupId: this.$route.params.groupId,\n      groupName: this.$route.params.groupName,\n      selectedUserIdList: [],\n      loop: Math.floor(Number(this.$route.params.groupMember.length) / 4) + 1\n    };\n  },\n  created() {\n    this.selectAll();\n    for (let i = 0; i < this.$route.params.groupMember.length; i++) {\n      this.selectedUserIdList[i] = this.$route.params.groupMember[i].id;\n    }\n  },\n  methods: {\n    addForm() {\n      this.loop = this.loop + 1;\n    },\n    selectAll() {\n      const path = constant.SELECT_USER_PULLDOWN_PATH;\n      axios.get(path).then(response => {\n        this.users = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    update(groupId, groupName, selectedUserIdList) {\n      var res = confirm(constant.UPDATE_CONFIRM_MESSAGE);\n      var userIdList = [];\n      for (let userId of selectedUserIdList) {\n        if (userId !== null && typeof value === 'object') {\n          userIdList.push(userId);\n        } else {\n          userIdList.push({\n            \"id\": Number(userId)\n          });\n        }\n        confirm(userId);\n      }\n      if (res == true) {\n        const path = constant.UPDATE_GROUP_PATH;\n        axios.post(path, {\n          groupId: groupId,\n          groupName: groupName,\n          user: userIdList\n        }).then(response => {\n          console.log(response.data);\n          this.$router.push({\n            name: \"PageLoading\",\n            params: {\n              message: constant.UPDATE_COMPLETE_MESSAGE,\n              pageCode: constant.GROUP_MANAGEMENT_PAGE\n            }\n          });\n        }).catch(err => {\n          console.log(\"err:\", err);\n          this.$router.push({\n            name: \"GroupManagement\",\n            params: {\n              message: constant.ERROR_MESSAGE\n            }\n          });\n        });\n      }\n    },\n    back() {\n      this.$router.push({\n        name: \"GroupManagement\"\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","constant","data","users","groupId","$route","params","groupName","selectedUserIdList","loop","Math","floor","Number","groupMember","length","created","selectAll","i","id","methods","addForm","path","SELECT_USER_PULLDOWN_PATH","get","then","response","catch","error","console","log","update","res","confirm","UPDATE_CONFIRM_MESSAGE","userIdList","userId","value","push","UPDATE_GROUP_PATH","post","user","$router","name","message","UPDATE_COMPLETE_MESSAGE","pageCode","GROUP_MANAGEMENT_PAGE","err","ERROR_MESSAGE","back"],"sources":["src/pages/testGroupInsert.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row>\n            <v-col cols=\"11\">\n                <h2>\n                    グループ更新\n                </h2>\n            </v-col>\n            <v-col>\n                <v-btn small fab dark color=\"indigo\" @click=\"back()\">\n                    <v-icon dark> mdi-undo-variant </v-icon>\n                </v-btn>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col>\n                <v-text-field hide-details=\"auto\" v-model=\"groupName\" label=\"グループ名\" clearable></v-text-field>\n            </v-col>\n        </v-row>\n        <div v-for=\"n in loop\" :key=\"n\">\n            <v-row>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        v-model=\"selectedUserIdList[4 * (n - 1)]\" return-object></v-select>\n                </v-col>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        v-model=\"selectedUserIdList[4 * n - 3]\" return-object></v-select>\n                </v-col>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        v-model=\"selectedUserIdList[4 * n - 2]\" return-object></v-select>\n                </v-col>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        v-model=\"selectedUserIdList[4 * n - 1]\" return-object></v-select>\n                </v-col>\n            </v-row>\n        </div>\n        <v-row>\n            <v-col cols=\"1\">\n                <v-btn small fab dark color=\"indigo\" @click=\"addForm()\">\n                    <v-icon dark> mdi-plus </v-icon>\n                </v-btn>\n            </v-col>\n        </v-row>\n        <v-layout>\n            <v-btn class=\"mx-auto\" @click=\"update(groupId, groupName, selectedUserIdList)\">\n                Update\n            </v-btn>\n        </v-layout>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport constant from '@/consts/const';\nexport default {\n    data() {\n        return {\n            users: [],\n            groupId: this.$route.params.groupId,\n            groupName: this.$route.params.groupName,\n            selectedUserIdList: [],\n            loop: Math.floor(Number(this.$route.params.groupMember.length) / 4) + 1,\n        };\n    },\n    created() {\n        this.selectAll()\n        for (let i = 0; i < this.$route.params.groupMember.length; i++) {\n            this.selectedUserIdList[i] = this.$route.params.groupMember[i].id\n        }\n    },\n    methods: {\n        addForm() {\n            this.loop = this.loop + 1\n        },\n        selectAll() {\n            const path = constant.SELECT_USER_PULLDOWN_PATH;\n            axios.get(path)\n                .then(response => {\n                    this.users = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        update(groupId, groupName, selectedUserIdList) {\n            var res = confirm(constant.UPDATE_CONFIRM_MESSAGE);\n\n            var userIdList = [];\n            for (let userId of selectedUserIdList) {\n                if (userId !== null && typeof value === 'object'){\n                    userIdList.push(userId);\n            }else{\n                userIdList.push({ \"id\": Number(userId) });\n            }\n                confirm(userId)\n                \n            }\n\n                \n            if (res == true) {\n                const path = constant.UPDATE_GROUP_PATH\n                axios.post(path, {\n                    groupId: groupId,\n                    groupName: groupName,\n                    user: userIdList,\n                }\n                )\n                    .then(response => {\n                        console.log(response.data);\n                        this.$router.push({\n                            name: \"PageLoading\",\n                            params: {\n                                message: constant.UPDATE_COMPLETE_MESSAGE,\n                                pageCode: constant.GROUP_MANAGEMENT_PAGE\n                            }\n                        });\n                    })\n                    .catch(err => {\n                        console.log(\"err:\", err);\n                        this.$router.push({\n                            name: \"GroupManagement\",\n                            params: {\n                                message: constant.ERROR_MESSAGE\n                            }\n                        });\n                    });\n            }\n        },\n        back() {\n            this.$router.push({\n                name: \"GroupManagement\"\n            })\n        },\n    }\n}\n</script>\n\n<style scoped></style>"],"mappings":";AAuDA,OAAAA,KAAA;AACA,OAAAC,QAAA;AACA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,OAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAF,OAAA;MACAG,SAAA,OAAAF,MAAA,CAAAC,MAAA,CAAAC,SAAA;MACAC,kBAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,MAAA,MAAAP,MAAA,CAAAC,MAAA,CAAAO,WAAA,CAAAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;IACA,SAAAC,CAAA,MAAAA,CAAA,QAAAZ,MAAA,CAAAC,MAAA,CAAAO,WAAA,CAAAC,MAAA,EAAAG,CAAA;MACA,KAAAT,kBAAA,CAAAS,CAAA,SAAAZ,MAAA,CAAAC,MAAA,CAAAO,WAAA,CAAAI,CAAA,EAAAC,EAAA;IACA;EACA;EACAC,OAAA;IACAC,QAAA;MACA,KAAAX,IAAA,QAAAA,IAAA;IACA;IACAO,UAAA;MACA,MAAAK,IAAA,GAAApB,QAAA,CAAAqB,yBAAA;MACAtB,KAAA,CAAAuB,GAAA,CAAAF,IAAA,EACAG,IAAA,CAAAC,QAAA;QACA,KAAAtB,KAAA,GAAAsB,QAAA,CAAAvB,IAAA;MACA,GACAwB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAG,OAAA1B,OAAA,EAAAG,SAAA,EAAAC,kBAAA;MACA,IAAAuB,GAAA,GAAAC,OAAA,CAAA/B,QAAA,CAAAgC,sBAAA;MAEA,IAAAC,UAAA;MACA,SAAAC,MAAA,IAAA3B,kBAAA;QACA,IAAA2B,MAAA,oBAAAC,KAAA;UACAF,UAAA,CAAAG,IAAA,CAAAF,MAAA;QACA;UACAD,UAAA,CAAAG,IAAA;YAAA,MAAAzB,MAAA,CAAAuB,MAAA;UAAA;QACA;QACAH,OAAA,CAAAG,MAAA;MAEA;MAGA,IAAAJ,GAAA;QACA,MAAAV,IAAA,GAAApB,QAAA,CAAAqC,iBAAA;QACAtC,KAAA,CAAAuC,IAAA,CAAAlB,IAAA;UACAjB,OAAA,EAAAA,OAAA;UACAG,SAAA,EAAAA,SAAA;UACAiC,IAAA,EAAAN;QACA,CACA,EACAV,IAAA,CAAAC,QAAA;UACAG,OAAA,CAAAC,GAAA,CAAAJ,QAAA,CAAAvB,IAAA;UACA,KAAAuC,OAAA,CAAAJ,IAAA;YACAK,IAAA;YACApC,MAAA;cACAqC,OAAA,EAAA1C,QAAA,CAAA2C,uBAAA;cACAC,QAAA,EAAA5C,QAAA,CAAA6C;YACA;UACA;QACA,GACApB,KAAA,CAAAqB,GAAA;UACAnB,OAAA,CAAAC,GAAA,SAAAkB,GAAA;UACA,KAAAN,OAAA,CAAAJ,IAAA;YACAK,IAAA;YACApC,MAAA;cACAqC,OAAA,EAAA1C,QAAA,CAAA+C;YACA;UACA;QACA;MACA;IACA;IACAC,KAAA;MACA,KAAAR,OAAA,CAAAJ,IAAA;QACAK,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}