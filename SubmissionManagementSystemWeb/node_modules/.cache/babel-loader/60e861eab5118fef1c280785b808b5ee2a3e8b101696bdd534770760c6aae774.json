{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport constant from '@/consts/const';\nexport default {\n  data() {\n    return {\n      users: [],\n      groupName: \"\",\n      selectedUserIdList: [],\n      loop: 1\n    };\n  },\n  //入力フォームに入力時、処理実施\n  computed: {\n    //入力チェック\n    inputCheck() {\n      //グループ名が未入力もしくは空白行のみの場合\n      if (!this.groupName.match(/\\S/g)) {\n        confirm(\"a\");\n        //非活性\n        return false;\n      } else {\n        //メンバーが未選択の場合\n        if (this.selectedUserIdList.length == 0) {\n          confirm(\"b\");\n          //非活性\n          return false;\n        }\n        for (let selectedUserId of this.selectedUserIdList) {\n          confirm(Number(selectedUserId));\n          confirm(!isNaN(Number(selectedUserId)));\n          //ユーザが一人でも選択されている場合\n          if (selectedUserId == null || isNaN(Number(selectedUserId))) {\n            confirm(\"d\");\n            //削除IDのみの場合、非活性\n            return false;\n          }\n        }\n        confirm(\"true\");\n        //活性\n        return true;\n      }\n    }\n  },\n  created() {\n    this.selectAll();\n  },\n  methods: {\n    addForm() {\n      this.loop = this.loop + 1;\n    },\n    selectAll() {\n      const path = constant.SELECT_USER_PULLDOWN_PATH;\n      axios.get(path).then(response => {\n        this.users = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    insert(groupName, selectedUserIdList) {\n      var res = confirm(constant.INSERT_CONFIRM_MESSAGE);\n      var userIdList = [];\n      for (let userId of selectedUserIdList) {\n        confirm(userId);\n        confirm(Number(userId));\n        if (!isNaN(Number(userId))) {\n          userIdList.push({\n            \"id\": Number(userId)\n          });\n        }\n      }\n      if (res == true) {\n        const path = constant.INSERT_GROUP_PATH;\n        axios.put(path, {\n          groupName: groupName,\n          user: userIdList\n        }).then(response => {\n          this.$router.push({\n            name: \"PageLoading\",\n            params: {\n              message: constant.INSERT_COMPLETE_MESSAGE,\n              pageCode: constant.GROUP_MANAGEMENT_PAGE\n            }\n          });\n          console.log(response.data);\n        }).catch(err => {\n          console.log(\"err:\", err);\n          this.$router.push({\n            name: \"GroupManagement\",\n            params: {\n              message: constant.ERROR_MESSAGE\n            }\n          });\n        });\n      }\n    },\n    back() {\n      this.$router.push({\n        name: \"GroupManagement\"\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","constant","data","users","groupName","selectedUserIdList","loop","computed","inputCheck","match","confirm","length","selectedUserId","Number","isNaN","created","selectAll","methods","addForm","path","SELECT_USER_PULLDOWN_PATH","get","then","response","catch","error","console","log","insert","res","INSERT_CONFIRM_MESSAGE","userIdList","userId","push","INSERT_GROUP_PATH","put","user","$router","name","params","message","INSERT_COMPLETE_MESSAGE","pageCode","GROUP_MANAGEMENT_PAGE","err","ERROR_MESSAGE","back"],"sources":["src/pages/GroupInsert.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row>\n            <v-col cols=\"11\">\n                <h2>\n                    グループ追加\n                </h2>\n            </v-col>\n            <v-col>\n                <v-btn small fab dark color=\"indigo\" @click=\"back()\">\n                    <v-icon dark> mdi-undo-variant </v-icon>\n                </v-btn>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col>\n                <v-text-field hide-details=\"auto\" @keyup=\"inputCheck\" v-model=\"groupName\" label=\"グループ名\"></v-text-field>\n            </v-col>\n        </v-row>\n        <div v-for=\"n in loop\" :key=\"n\">\n            <v-row>\n                <v-col cols=\"3\">\n                    <v-combobox item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        @keyup=\"inputCheck\" v-model=\"selectedUserIdList[4 * (n - 1)]\" clearable></v-combobox>\n                </v-col>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        @keyup=\"inputCheck\" v-model=\"selectedUserIdList[4 * n - 3]\" clearable></v-select>\n                </v-col>\n                <!-- <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        @keyup=\"inputCheck\" v-model=\"selectedUserIdList[4 * n - 2]\"></v-select>\n                </v-col>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        @keyup=\"inputCheck\" v-model=\"selectedUserIdList[4 * n - 1]\"></v-select>\n                </v-col> -->\n            </v-row>\n        </div>\n        <v-row>\n            <v-col cols=\"1\">\n                <v-btn small fab dark color=\"indigo\" @click=\"addForm()\">\n                    <v-icon dark> mdi-plus </v-icon>\n                </v-btn>\n            </v-col>\n        </v-row>\n        <v-layout>\n            <v-btn class=\"mx-auto\" :disabled=\"!inputCheck\" @click=\"insert(groupName, selectedUserIdList)\">\n                Insert\n            </v-btn>\n        </v-layout>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport constant from '@/consts/const';\nexport default {\n    data() {\n        return {\n            users: [],\n            groupName: \"\",\n            selectedUserIdList: [],\n            loop: 1,\n        };\n    },\n    //入力フォームに入力時、処理実施\n    computed: {\n        //入力チェック\n        inputCheck() {\n            //グループ名が未入力もしくは空白行のみの場合\n            if (!(this.groupName.match(/\\S/g))) {\n                confirm(\"a\")\n                //非活性\n                return false\n            }\n            else {\n                //メンバーが未選択の場合\n                 if (this.selectedUserIdList.length == 0) {\n                     confirm(\"b\")\n                     //非活性\n                     return false\n                 }\n                for (let selectedUserId of this.selectedUserIdList) {\n                    confirm(Number(selectedUserId))\n                    confirm(!(isNaN(Number(selectedUserId))))\n                    //ユーザが一人でも選択されている場合\n                    if (selectedUserId == null || (isNaN(Number(selectedUserId)))) {\n                        confirm(\"d\")\n                        //削除IDのみの場合、非活性\n                        return false\n                    }\n                }\n\n                confirm(\"true\")\n                //活性\n                return true\n            }\n        }\n    },\n    created() {\n        this.selectAll()\n    },\n    methods: {\n        addForm() {\n            this.loop = this.loop + 1\n        },\n        selectAll() {\n            const path = constant.SELECT_USER_PULLDOWN_PATH;\n            axios.get(path)\n                .then(response => {\n                    this.users = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        insert(groupName, selectedUserIdList) {\n            var res = confirm(constant.INSERT_CONFIRM_MESSAGE);\n\n            var userIdList = [];\n            for (let userId of selectedUserIdList) {\n                confirm(userId)\n                confirm(Number(userId))\n                if (!(isNaN(Number(userId)))) {\n                    userIdList.push({ \"id\": Number(userId) });\n                }\n            }\n\n            if (res == true) {\n                const path = constant.INSERT_GROUP_PATH\n                axios.put(path, {\n                    groupName: groupName,\n                    user: userIdList,\n                }\n                )\n                    .then(response => {\n                        this.$router.push({\n                            name: \"PageLoading\",\n                            params: {\n                                message: constant.INSERT_COMPLETE_MESSAGE,\n                                pageCode: constant.GROUP_MANAGEMENT_PAGE\n                            }\n                        });\n                        console.log(response.data);\n                    })\n                    .catch(err => {\n                        console.log(\"err:\", err);\n                        this.$router.push({\n                            name: \"GroupManagement\",\n                            params: {\n                                message: constant.ERROR_MESSAGE\n                            }\n                        });\n                    });\n            }\n        },\n        back() {\n            this.$router.push({\n                name: \"GroupManagement\"\n            })\n        },\n    }\n}\n</script>\n\n<style scoped></style>"],"mappings":";AAuDA,OAAAA,KAAA;AACA,OAAAC,QAAA;AACA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,SAAA;MACAC,kBAAA;MACAC,IAAA;IACA;EACA;EACA;EACAC,QAAA;IACA;IACAC,WAAA;MACA;MACA,UAAAJ,SAAA,CAAAK,KAAA;QACAC,OAAA;QACA;QACA;MACA,OACA;QACA;QACA,SAAAL,kBAAA,CAAAM,MAAA;UACAD,OAAA;UACA;UACA;QACA;QACA,SAAAE,cAAA,SAAAP,kBAAA;UACAK,OAAA,CAAAG,MAAA,CAAAD,cAAA;UACAF,OAAA,EAAAI,KAAA,CAAAD,MAAA,CAAAD,cAAA;UACA;UACA,IAAAA,cAAA,YAAAE,KAAA,CAAAD,MAAA,CAAAD,cAAA;YACAF,OAAA;YACA;YACA;UACA;QACA;QAEAA,OAAA;QACA;QACA;MACA;IACA;EACA;EACAK,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAC,QAAA;MACA,KAAAZ,IAAA,QAAAA,IAAA;IACA;IACAU,UAAA;MACA,MAAAG,IAAA,GAAAlB,QAAA,CAAAmB,yBAAA;MACApB,KAAA,CAAAqB,GAAA,CAAAF,IAAA,EACAG,IAAA,CAAAC,QAAA;QACA,KAAApB,KAAA,GAAAoB,QAAA,CAAArB,IAAA;MACA,GACAsB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAG,OAAAxB,SAAA,EAAAC,kBAAA;MACA,IAAAwB,GAAA,GAAAnB,OAAA,CAAAT,QAAA,CAAA6B,sBAAA;MAEA,IAAAC,UAAA;MACA,SAAAC,MAAA,IAAA3B,kBAAA;QACAK,OAAA,CAAAsB,MAAA;QACAtB,OAAA,CAAAG,MAAA,CAAAmB,MAAA;QACA,KAAAlB,KAAA,CAAAD,MAAA,CAAAmB,MAAA;UACAD,UAAA,CAAAE,IAAA;YAAA,MAAApB,MAAA,CAAAmB,MAAA;UAAA;QACA;MACA;MAEA,IAAAH,GAAA;QACA,MAAAV,IAAA,GAAAlB,QAAA,CAAAiC,iBAAA;QACAlC,KAAA,CAAAmC,GAAA,CAAAhB,IAAA;UACAf,SAAA,EAAAA,SAAA;UACAgC,IAAA,EAAAL;QACA,CACA,EACAT,IAAA,CAAAC,QAAA;UACA,KAAAc,OAAA,CAAAJ,IAAA;YACAK,IAAA;YACAC,MAAA;cACAC,OAAA,EAAAvC,QAAA,CAAAwC,uBAAA;cACAC,QAAA,EAAAzC,QAAA,CAAA0C;YACA;UACA;UACAjB,OAAA,CAAAC,GAAA,CAAAJ,QAAA,CAAArB,IAAA;QACA,GACAsB,KAAA,CAAAoB,GAAA;UACAlB,OAAA,CAAAC,GAAA,SAAAiB,GAAA;UACA,KAAAP,OAAA,CAAAJ,IAAA;YACAK,IAAA;YACAC,MAAA;cACAC,OAAA,EAAAvC,QAAA,CAAA4C;YACA;UACA;QACA;MACA;IACA;IACAC,KAAA;MACA,KAAAT,OAAA,CAAAJ,IAAA;QACAK,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}