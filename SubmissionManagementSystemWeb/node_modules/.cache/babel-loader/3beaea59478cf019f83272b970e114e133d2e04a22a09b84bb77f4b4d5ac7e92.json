{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport constant from '@/consts/const';\nexport default {\n  data() {\n    return {\n      users: [],\n      groupId: this.$route.params.groupId,\n      groupName: this.$route.params.groupName,\n      selectedUserIdList: [],\n      loop: 0\n    };\n  },\n  created() {\n    confirm(this.$route.params.groupMember.length);\n    this.loop = Number(this.$route.params.groupMember.length);\n    confirm(this.loop);\n    this.selectAll();\n    for (let i = 0; i < this.$route.params.groupMember.length; i++) {\n      this.selectedUserIdList[i] = this.$route.params.groupMember.id;\n      confirm(this.selectedUserIdList[i]);\n    }\n  },\n  methods: {\n    addForm() {\n      this.loop = this.loop + 1;\n    },\n    selectAll() {\n      const path = constant.SELECT_USER_PULLDOWN_PATH;\n      axios.get(path).then(response => {\n        this.users = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    update(groupId, groupName, selectedUserIdList) {\n      var res = confirm(constant.UPDATE_CONFIRM_MESSAGE);\n      var userIdList = [];\n      for (let userId of selectedUserIdList) {\n        userIdList.push({\n          \"id\": Number(userId)\n        });\n      }\n      if (res == true) {\n        const path = constant.UPDATE_GROUP_PATH;\n        axios.post(path, {\n          groupId: groupId,\n          groupName: groupName,\n          user: userIdList\n        }).then(response => {\n          console.log(response.data);\n          this.$router.push({\n            name: \"PageLoading\",\n            params: {\n              message: constant.UPDATE_COMPLETE_MESSAGE,\n              pageCode: constant.GROUP_MANAGEMENT_PAGE\n            }\n          });\n        }).catch(err => {\n          console.log(\"err:\", err);\n          this.$router.push({\n            name: \"GroupManagement\",\n            params: {\n              message: constant.ERROR_MESSAGE\n            }\n          });\n        });\n      }\n    },\n    back() {\n      this.$router.push({\n        name: \"GroupManagement\"\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","constant","data","users","groupId","$route","params","groupName","selectedUserIdList","loop","created","confirm","groupMember","length","Number","selectAll","i","id","methods","addForm","path","SELECT_USER_PULLDOWN_PATH","get","then","response","catch","error","console","log","update","res","UPDATE_CONFIRM_MESSAGE","userIdList","userId","push","UPDATE_GROUP_PATH","post","user","$router","name","message","UPDATE_COMPLETE_MESSAGE","pageCode","GROUP_MANAGEMENT_PAGE","err","ERROR_MESSAGE","back"],"sources":["src/pages/testGroupInsert.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row>\n            <v-col cols=\"11\">\n                <h2>\n                    グループ更新\n                </h2>\n            </v-col>\n            <v-col>\n                <v-btn small fab dark color=\"indigo\" @click=\"back()\">\n                    <v-icon dark> mdi-undo-variant </v-icon>\n                </v-btn>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col>\n                <v-text-field hide-details=\"auto\" v-model=\"groupName\" label=\"グループ名\" clearable></v-text-field>\n            </v-col>\n        </v-row>\n        <div v-for=\"n in loop\" :key=\"n\">\n            <v-row>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        v-model=\"selectedUserIdList[4 * (n - 1)]\" return-object></v-select>\n                </v-col>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        v-model=\"selectedUserIdList[4 * n - 3]\" return-object></v-select>\n                </v-col>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        v-model=\"selectedUserIdList[4 * n - 2]\" return-object></v-select>\n                </v-col>\n                <v-col cols=\"3\">\n                    <v-select item-text=\"userName\" :items=\"users\" item-value=\"id\" label=\"ユーザ名\" class=\"ma-2\"\n                        v-model=\"selectedUserIdList[4 * n - 1]\" return-object></v-select>\n                </v-col>\n            </v-row>\n        </div>\n        <v-row>\n            <v-col cols=\"1\">\n                <v-btn small fab dark color=\"indigo\" @click=\"addForm()\">\n                    <v-icon dark> mdi-plus </v-icon>\n                </v-btn>\n            </v-col>\n        </v-row>\n        <v-layout>\n            <v-btn class=\"mx-auto\"\n                @click=\"update(groupId, groupName, selectedUserId0, selectedUserId1, selectedUserId2, selectedUserId3)\">\n                Update\n            </v-btn>\n        </v-layout>\n    </v-container>\n</template>\n\n<script>\nimport axios from 'axios';\nimport constant from '@/consts/const';\nexport default {\n    data() {\n        return {\n            users: [],\n            groupId: this.$route.params.groupId,\n            groupName: this.$route.params.groupName,\n            selectedUserIdList: [],\n            loop: 0,\n        };\n    },\n    created() {\n        confirm(this.$route.params.groupMember.length);\n        this.loop = Number(this.$route.params.groupMember.length);\n            confirm(this.loop);\n        this.selectAll()\n        for (let i = 0; i < this.$route.params.groupMember.length; i++) {\n            this.selectedUserIdList[i] = this.$route.params.groupMember.id\n            confirm(this.selectedUserIdList[i])\n        }\n    },\n    methods: {\n        addForm() {\n            this.loop = this.loop + 1\n        },\n        selectAll() {\n            const path = constant.SELECT_USER_PULLDOWN_PATH;\n            axios.get(path)\n                .then(response => {\n                    this.users = response.data\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        },\n        update(groupId, groupName, selectedUserIdList) {\n            var res = confirm(constant.UPDATE_CONFIRM_MESSAGE);\n\n            var userIdList = [];\n            for (let userId of selectedUserIdList) {\n                userIdList.push({ \"id\": Number(userId) });\n            }\n\n            if (res == true) {\n                const path = constant.UPDATE_GROUP_PATH\n                axios.post(path, {\n                    groupId: groupId,\n                    groupName: groupName,\n                    user: userIdList,\n                }\n                )\n                    .then(response => {\n                        console.log(response.data);\n                        this.$router.push({\n                            name: \"PageLoading\",\n                            params: {\n                                message: constant.UPDATE_COMPLETE_MESSAGE,\n                                pageCode: constant.GROUP_MANAGEMENT_PAGE\n                            }\n                        });\n                    })\n                    .catch(err => {\n                        console.log(\"err:\", err);\n                        this.$router.push({\n                            name: \"GroupManagement\",\n                            params: {\n                                message: constant.ERROR_MESSAGE\n                            }\n                        });\n                    });\n            }\n        },\n        back() {\n            this.$router.push({\n                name: \"GroupManagement\"\n            })\n        },\n    }\n}\n</script>\n\n<style scoped></style>"],"mappings":";AAwDA,OAAAA,KAAA;AACA,OAAAC,QAAA;AACA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,OAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAF,OAAA;MACAG,SAAA,OAAAF,MAAA,CAAAC,MAAA,CAAAC,SAAA;MACAC,kBAAA;MACAC,IAAA;IACA;EACA;EACAC,QAAA;IACAC,OAAA,MAAAN,MAAA,CAAAC,MAAA,CAAAM,WAAA,CAAAC,MAAA;IACA,KAAAJ,IAAA,GAAAK,MAAA,MAAAT,MAAA,CAAAC,MAAA,CAAAM,WAAA,CAAAC,MAAA;IACAF,OAAA,MAAAF,IAAA;IACA,KAAAM,SAAA;IACA,SAAAC,CAAA,MAAAA,CAAA,QAAAX,MAAA,CAAAC,MAAA,CAAAM,WAAA,CAAAC,MAAA,EAAAG,CAAA;MACA,KAAAR,kBAAA,CAAAQ,CAAA,SAAAX,MAAA,CAAAC,MAAA,CAAAM,WAAA,CAAAK,EAAA;MACAN,OAAA,MAAAH,kBAAA,CAAAQ,CAAA;IACA;EACA;EACAE,OAAA;IACAC,QAAA;MACA,KAAAV,IAAA,QAAAA,IAAA;IACA;IACAM,UAAA;MACA,MAAAK,IAAA,GAAAnB,QAAA,CAAAoB,yBAAA;MACArB,KAAA,CAAAsB,GAAA,CAAAF,IAAA,EACAG,IAAA,CAAAC,QAAA;QACA,KAAArB,KAAA,GAAAqB,QAAA,CAAAtB,IAAA;MACA,GACAuB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAG,OAAAzB,OAAA,EAAAG,SAAA,EAAAC,kBAAA;MACA,IAAAsB,GAAA,GAAAnB,OAAA,CAAAV,QAAA,CAAA8B,sBAAA;MAEA,IAAAC,UAAA;MACA,SAAAC,MAAA,IAAAzB,kBAAA;QACAwB,UAAA,CAAAE,IAAA;UAAA,MAAApB,MAAA,CAAAmB,MAAA;QAAA;MACA;MAEA,IAAAH,GAAA;QACA,MAAAV,IAAA,GAAAnB,QAAA,CAAAkC,iBAAA;QACAnC,KAAA,CAAAoC,IAAA,CAAAhB,IAAA;UACAhB,OAAA,EAAAA,OAAA;UACAG,SAAA,EAAAA,SAAA;UACA8B,IAAA,EAAAL;QACA,CACA,EACAT,IAAA,CAAAC,QAAA;UACAG,OAAA,CAAAC,GAAA,CAAAJ,QAAA,CAAAtB,IAAA;UACA,KAAAoC,OAAA,CAAAJ,IAAA;YACAK,IAAA;YACAjC,MAAA;cACAkC,OAAA,EAAAvC,QAAA,CAAAwC,uBAAA;cACAC,QAAA,EAAAzC,QAAA,CAAA0C;YACA;UACA;QACA,GACAlB,KAAA,CAAAmB,GAAA;UACAjB,OAAA,CAAAC,GAAA,SAAAgB,GAAA;UACA,KAAAN,OAAA,CAAAJ,IAAA;YACAK,IAAA;YACAjC,MAAA;cACAkC,OAAA,EAAAvC,QAAA,CAAA4C;YACA;UACA;QACA;MACA;IACA;IACAC,KAAA;MACA,KAAAR,OAAA,CAAAJ,IAAA;QACAK,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}